# General Spring Boot Settings (do not change!)

spring.main.allow-bean-definition-overriding=true

# Server Settings for defining port and security
server.port: 8010
spring.cloud.config.enabled: false
eureka.client.enabled: false

# Data transfer settings, e.g. transfer compression and multipart message size. 
# The properties max-file-size and max-request-size define the maximum size of files 
# transferred to and from the repository. Setting them to -1 removes all limits.

server.compression.enabled: false
spring.servlet.multipart.max-file-size: 100MB
spring.servlet.multipart.max-request-size: 100MB

 
# Spring Management Endpoint Settings. By default, the health endpoint will be 
# enabled to apply service monitoring including detailed information. 
# Furthermore, all endpoints will be exposed to external access. If this is not desired, 
# just comment the property 'management.endpoints.web.exposure.include' in order to only 
# allow local access.

management.endpoint.health.enabled: true
management.endpoint.health.show-details: ALWAYS
management.endpoint.health.sensitive: false
management.endpoints.web.exposure.include: *
management.info.env.enabled: true

# Logging Settings. Most logging of KIT DM is performed on TRACE level. However, if you
# plan to enable logging with this granularity it is recommended to this only for 
# a selection of a few packages. Otherwise, the amount of logging information might be
# overwhelming.

logging.level.root: INFO

logging.levelreactor.netty: TRACE
org.springframework.cloud.gateway: TRACE
spring.cloud.gateway.httpclient.wiretap: true
spring.cloud.gateway.httpserver.wiretap: true


#logging.file.path:log
#logging.pattern.file:%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx 
#spring.output.ansi.enabled:ALWAYS

###################################################################
##################  Repository Specific Settings ##################
###################################################################

# Enable/disable (default) authentication. If authentication is enabled, a separate 
# Authentication Service should be used in order to obtain JSON Web Tokens holding 
# login information. The token has then to be provided within the Authentication header
# of each HTTP request with a value of 'Bearer <TOKEN>' without quotes, replacing <TOKEN>
# be the token obtained from the authentication service.

repo.auth.enabled: false

# The jwtSecret is the mutual secret between all trusted services. This means, that if
# authentication is enabled, the jwtSecret used by the Authentication Service to sign
# issued JWTokens must be the same as the jwtSecret of the repository in order to 
# be able to validate the signature. By default, the secret should be selected randomly
# and with a sufficient length.

repo.auth.jwtSecret: vkfvoswsohwrxgjaxipuiyyjgubggzdaqrcuupbugxtnalhiegkppdgjgwxsmvdb


spring.autoconfigure.exclude=org.keycloak.adapters.springboot.KeycloakAutoConfiguration,org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
##keycloakjwt.jwkUrl=https://gateway.datamanager.kit.edu:8443/realms/dem_testing/protocol/openid-connect/certs
##keycloakjwt.resource=kitdm-services
##keycloakjwt.jwtClaim=preferred_username
##keycloakjwt.groupClaim=groups
#keycloakjwt.connect-timeoutms=500 //optional
#keycloakjwt.read-timeoutms=500 // optional

##keycloak.realm=nfdi4matwerk
##keycloak.auth-server-url=https://gateway.datamanager.kit.edu:8443/
##keycloak.resource=kitdm-services

##keycloak.ssl-required=all

# repo.security.allowedOriginPattern=http://localhost:*

spring.boot.admin.client.url: http://admin-service:8060
spring.boot.admin.client.instance.client-base-url: http://gateway:8010
spring.boot.admin.client.instance.name: gateway
spring.boot.admin.client.username: admin
spring.boot.admin.client.password: admin-password


spring.cloud.gateway.routes[0].id:base-repo
spring.cloud.gateway.routes[0].uri:http://base-repo:8081
spring.cloud.gateway.routes[0].predicates[0].name:Path
spring.cloud.gateway.routes[0].predicates[0].args[pattern]:/api/v1/dataresources/**