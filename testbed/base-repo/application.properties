# General Spring Boot Settings (do not change!)

spring.main.allow-bean-definition-overriding=true

# Server Settings for defining port and security
server.port: 8081
spring.cloud.config.enabled: false
eureka.client.enabled: false
# Data transfer settings, e.g. transfer compression and multipart message size. 
# The properties max-file-size and max-request-size define the maximum size of files 
# transferred to and from the repository. Setting them to -1 removes all limits.

server.compression.enabled: false
spring.servlet.multipart.max-file-size: 100MB
spring.servlet.multipart.max-request-size: 100MB

# Spring Datasource Settings, e.g database type, connection string and login credentials.
# Furthermore, the settings at the end allow to enable logging of SQL queries for 
# debugging. By default, SQL logging should be disabled for performance reasons.

#spring.datasource.driver-class-name: org.h2.Driver
#spring.datasource.url:  jdbc:h2:mem:db_test;DB_CLOSE_DELAY=-1
#spring.datasource.username: sa
#spring.datasource.password: sa
#spring.jpa.hibernate.ddl-auto: update
#spring.jpa.show-sql: false
#spring.jpa.properties.hibernate.use_sql_comments: false
#spring.jpa.properties.hibernate.format_sql: false

spring.datasource.platform: postgres
spring.datasource.url: jdbc:postgresql://database:5432/kitdm20
spring.datasource.username: docker
spring.datasource.password: docker
spring.datasource.driverClassName: org.postgresql.Driver
spring.jpa.database: POSTGRESQL
#spring.jpa.show-sql: true
#spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform: org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto: update
   
# Spring Management Endpoint Settings. By default, the health endpoint will be 
# enabled to apply service monitoring including detailed information. 
# Furthermore, all endpoints will be exposed to external access. If this is not desired, 
# just comment the property 'management.endpoints.web.exposure.include' in order to only 
# allow local access.

management.endpoint.health.enabled: true
management.endpoint.health.show-details: ALWAYS
management.endpoint.health.sensitive: false
management.endpoints.web.exposure.include: *
management.info.env.enabled: true

# Logging Settings. Most logging of KIT DM is performed on TRACE level. However, if you
# plan to enable logging with this granularity it is recommended to this only for 
# a selection of a few packages. Otherwise, the amount of logging information might be
# overwhelming.

logging.level.root: WARN
#logging.level.edu.kit: TRACE
#logging.level.edu.kit.datamanager.episteme: TRACE
logging.level.edu.kit.datamanager: TRACE
#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.use_sql_comments=true
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.type=trace
logging.level.org.springframework: WARN
#logging.level.org.springframework.amqp: DEBUG

logging.file.path:log
logging.pattern.file:%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx 
spring.output.ansi.enabled:ALWAYS

###################################################################
##################  Repository Specific Settings ##################
###################################################################

# Enable/disable (default) authentication. If authentication is enabled, a separate 
# Authentication Service should be used in order to obtain JSON Web Tokens holding 
# login information. The token has then to be provided within the Authentication header
# of each HTTP request with a value of 'Bearer <TOKEN>' without quotes, replacing <TOKEN>
# be the token obtained from the authentication service.

repo.auth.enabled: false

# The jwtSecret is the mutual secret between all trusted services. This means, that if
# authentication is enabled, the jwtSecret used by the Authentication Service to sign
# issued JWTokens must be the same as the jwtSecret of the repository in order to 
# be able to validate the signature. By default, the secret should be selected randomly
# and with a sufficient length.

repo.auth.jwtSecret: vkfvoswsohwrxgjaxipuiyyjgubggzdaqrcuupbugxtnalhiegkppdgjgwxsmvdb

# The base path where all uploaded data will be stored. The base path must be a URI 
# pointing to a local folder.

repo.basepath:  file:///var/repository/
repo.plugin.storage: dateBased
repo.plugin.storage.date.pathPattern: @{year}/@{month}/@{day}

repo.readOnly: false
# Enable (default)/disable messaging. The messaging functionality requires a RabbitMQ
# server receiving and distributing the messages sent by the repository. The server is 
# accessed via repo.messaging.hostname and repo.messaging.port 
# The property 'repo.messaging.topic' defines the topic where messages are sent, whereas 
# the all properties with 'binding' define from where messages are received, e.g. the 
# exchange aka. topic and the queue. The routingKeys are defining wich messages are 
# routed to the aforementioned queue.

repo.messaging.enabled: true
management.health.rabbit.enabled:true

repo.messaging.hostname:rabbitmq
repo.messaging.sender.exchange: repository_events
repo.messaging.receiver.exchange: repository_events
repo.messaging.receiver.queue: repoEventQueue
repo.messaging.receiver.routingKeys: dataresource.create.#, dataresource.update.#
repo.schedule.rate:1000

repo.search.enabled: true
management.health.elasticsearch.enabled:true
repo.search.url:http://elastic:9200
repo.search.index:baserepo
# The rate in milliseconds at which the repository itself will check for new messages.
# E.g. if a resource has been created, the repository may has to perform additional
# ingest steps. Therefor, special handlers can be added which will be executed at the
# configured repo.schedule.rate if a new message has been received.

repo.schedule.rate:1000

repo.messaging.handler.imagemagick.convertExecutable:test
repo.messaging.handler.imagemagick.identifyExecutable:test

# Enable (default)/disable audit functionalities. Auditing captures on the one hand 
# information about events occured at managed resources, e.g. create, update, delete 
# events, on the other hand the audit functionalty enabled versioning of resources.

#repo.audit.enabled:true
repo.plugin.versioning: simple
#repo.file.versioning.default:simple
#Service Features
#The maximum depth to which collection members can be expanded. 
#A value of 0 means that expansion is not supppoted. 
#A value of -1 means that the collections can be expanded to infinite depth.
collection.serviceFeature.maxExpansionDepth=-1

springdoc.api-docs.path=/api-docs
spring.data.rest.detection-strategy=annotated
spring.autoconfigure.exclude=org.keycloak.adapters.springboot.KeycloakAutoConfiguration,org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
##keycloakjwt.jwkUrl=https://gateway.datamanager.kit.edu:8443/realms/dem_testing/protocol/openid-connect/certs
##keycloakjwt.resource=kitdm-services
##keycloakjwt.jwtClaim=preferred_username
##keycloakjwt.groupClaim=groups
#keycloakjwt.connect-timeoutms=500 //optional
#keycloakjwt.read-timeoutms=500 // optional

##keycloak.realm=nfdi4matwerk
##keycloak.auth-server-url=https://gateway.datamanager.kit.edu:8443/
##keycloak.resource=kitdm-services

##keycloak.ssl-required=all

# repo.security.allowedOriginPattern=http://localhost:*

spring.boot.admin.client.url: http://monitoring-service:8060
spring.boot.admin.client.instance.client-base-url: http://base-repo:8081
spring.boot.admin.client.instance.name: base-repo
spring.boot.admin.client.username: admin
spring.boot.admin.client.password: admin-password
